<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:jee="http://www.springframework.org/schema/jee"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
							http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
							http://www.springframework.org/schema/context
							http://www.springframework.org/schema/context/spring-context-3.0.xsd
							http://www.springframework.org/schema/beans
							http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
							http://www.springframework.org/schema/jee
						    http://www.springframework.org/schema/jee/spring-jee-3.0.xsd">


	<!-- Use Springs JNDI support to look up JMS Connection Factory and Queue 
		definitions from the container. Connection details are not embedded in the 
		application -->
	<jee:jndi-lookup id="mqConnectionFactory" jndi-name="java:/ConnectionFactory" />
	<jee:jndi-lookup id="fproReceiverQ" jndi-name="java:/queue/FPROReceiveQ" />
	<jee:jndi-lookup id="fproSenderQ" jndi-name="java:/queue/FPROSendQ" />
	<jee:jndi-lookup id="imexReceiverQ" jndi-name="java:/queue/IMEXReceiveQ" />
	<jee:jndi-lookup id="imexSenderQ" jndi-name="java:/queue/IMEXSendQ" />
	<jee:jndi-lookup id="dataSource" jndi-name="java:jboss/MySqlDS"/>
	<!--
	<jee:jndi-lookup id="dataSource" jndi-name="java:jboss/MariaDBDS"/>
	-->

	<!-- message listener implementation that implements the JMS MessageListener interface and implements the
		 onMessage method to process incoming messages
	 -->
	<bean id="fproMessageListener" class="com.dbs.trade.dupcheck.jms.FPROMessageListener">
    	<property name="fproMessageSender" ref ="fproMessageSender" />
    	<property name="studentJDBCTemplate" ref ="studentJDBCTemplate" />
    </bean>
	<bean id="imexMessageListener" class="com.dbs.trade.dupcheck.jms.IMEXMessageListener">
    	<property name="imexMessageSender" ref ="imexMessageSender" />
    	<property name="studentJDBCTemplate" ref ="studentJDBCTemplate" />
    </bean>
	<!-- 1. connectionFactory - the connection factory definition used to connect to the Message Broker
	     2. destination - the Queue which the MessageListener container is listening on from incoming messages
	     3. messageListener - the implementation class that will actually handle the incoming messages. The
	        DeafultMesssageListener takes messages from the queue and passes them to the message listener for
	        processing. We've defined our message listener above (fproMessageListener)
	     4. concurrentConsumers - number of threads the DeafultMesaegListenerContainer will spawn to handle incoming messages
	  -->
	<bean id="messageListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
    	<property name="connectionFactory" ref ="mqConnectionFactory" />
    	<property name="destination" ref ="fproReceiverQ"/>
		<property name="messageListener" ref ="fproMessageListener"/>
		<property name="concurrentConsumers" value="1" />
		<property name="maxConcurrentConsumers" value="1" />
    </bean>
	<bean id="IMEXmessageListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
    	<property name="connectionFactory" ref ="mqConnectionFactory" />
    	<property name="destination" ref ="imexReceiverQ"/>
		<property name="messageListener" ref ="imexMessageListener"/>
		<property name="concurrentConsumers" value="1" />
		<property name="maxConcurrentConsumers" value="1" />
    </bean>

	<!-- MessageSenders -->
	<bean id="fproMessageSender" class="com.dbs.trade.dupcheck.jms.FPROMessageSender">
		<property name="jmsTemplate" ref="jmsTemplate"/>
		<property name="fproSenderQ" ref="fproSenderQ"/>
	</bean>
	<bean id="imexMessageSender" class="com.dbs.trade.dupcheck.jms.IMEXMessageSender">
		<property name="jmsTemplate" ref="jmsTemplate"/>
		<property name="imexSenderQ" ref="imexSenderQ"/>
	</bean>
	<!-- JMSTemplate is a Spring template that allows us to communicate with 
		a message broker via JMS. JMSTemplate takes care of boiler plate code such 
		as exception handling and resource management such as connection pooling. 
		We supply the JMS template with the connection factory mentioned above -->
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="mqConnectionFactory" />
	</bean>

   <bean id="studentJDBCTemplate" class="com.dbs.trade.dupcheck.dataaccess.StudentJDBCTemplate">
      <property name="dataSource" ref="dataSource" />    
   </bean>


</beans>
